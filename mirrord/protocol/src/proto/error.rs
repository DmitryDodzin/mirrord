// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `error.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.error.ErrorKindInternal)
pub struct ErrorKindInternal {
    // message fields
    // @@protoc_insertion_point(field:protocol.error.ErrorKindInternal.kind)
    pub kind: ::protobuf::EnumOrUnknown<ErrorKind>,
    // @@protoc_insertion_point(field:protocol.error.ErrorKindInternal.unknown_value)
    pub unknown_value: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.error.ErrorKindInternal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ErrorKindInternal {
    fn default() -> &'a ErrorKindInternal {
        <ErrorKindInternal as ::protobuf::Message>::default_instance()
    }
}

impl ErrorKindInternal {
    pub fn new() -> ErrorKindInternal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "kind",
            |m: &ErrorKindInternal| { &m.kind },
            |m: &mut ErrorKindInternal| { &mut m.kind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "unknown_value",
            |m: &ErrorKindInternal| { &m.unknown_value },
            |m: &mut ErrorKindInternal| { &mut m.unknown_value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ErrorKindInternal>(
            "ErrorKindInternal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ErrorKindInternal {
    const NAME: &'static str = "ErrorKindInternal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.kind = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.unknown_value = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.kind != ::protobuf::EnumOrUnknown::new(ErrorKind::NotFound) {
            my_size += ::protobuf::rt::int32_size(1, self.kind.value());
        }
        if let Some(v) = self.unknown_value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.kind != ::protobuf::EnumOrUnknown::new(ErrorKind::NotFound) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.kind))?;
        }
        if let Some(v) = self.unknown_value.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ErrorKindInternal {
        ErrorKindInternal::new()
    }

    fn clear(&mut self) {
        self.kind = ::protobuf::EnumOrUnknown::new(ErrorKind::NotFound);
        self.unknown_value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ErrorKindInternal {
        static instance: ErrorKindInternal = ErrorKindInternal {
            kind: ::protobuf::EnumOrUnknown::from_i32(0),
            unknown_value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ErrorKindInternal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ErrorKindInternal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ErrorKindInternal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorKindInternal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.error.ResponseError)
pub struct ResponseError {
    // message oneof groups
    pub responseErrorType: ::std::option::Option<response_error::ResponseErrorType>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.error.ResponseError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResponseError {
    fn default() -> &'a ResponseError {
        <ResponseError as ::protobuf::Message>::default_instance()
    }
}

impl ResponseError {
    pub fn new() -> ResponseError {
        ::std::default::Default::default()
    }

    // string allocation_failure = 1;

    pub fn allocation_failure(&self) -> &str {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::AllocationFailure(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_allocation_failure(&mut self) {
        self.responseErrorType = ::std::option::Option::None;
    }

    pub fn has_allocation_failure(&self) -> bool {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::AllocationFailure(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_allocation_failure(&mut self, v: ::std::string::String) {
        self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::AllocationFailure(v))
    }

    // Mutable pointer to the field.
    pub fn mut_allocation_failure(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(response_error::ResponseErrorType::AllocationFailure(_)) = self.responseErrorType {
        } else {
            self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::AllocationFailure(::std::string::String::new()));
        }
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::AllocationFailure(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_allocation_failure(&mut self) -> ::std::string::String {
        if self.has_allocation_failure() {
            match self.responseErrorType.take() {
                ::std::option::Option::Some(response_error::ResponseErrorType::AllocationFailure(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // uint64 not_found = 2;

    pub fn not_found(&self) -> u64 {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::NotFound(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_not_found(&mut self) {
        self.responseErrorType = ::std::option::Option::None;
    }

    pub fn has_not_found(&self) -> bool {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::NotFound(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_not_found(&mut self, v: u64) {
        self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::NotFound(v))
    }

    // uint64 not_directory = 3;

    pub fn not_directory(&self) -> u64 {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::NotDirectory(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_not_directory(&mut self) {
        self.responseErrorType = ::std::option::Option::None;
    }

    pub fn has_not_directory(&self) -> bool {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::NotDirectory(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_not_directory(&mut self, v: u64) {
        self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::NotDirectory(v))
    }

    // uint64 not_file = 4;

    pub fn not_file(&self) -> u64 {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::NotFile(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_not_file(&mut self) {
        self.responseErrorType = ::std::option::Option::None;
    }

    pub fn has_not_file(&self) -> bool {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::NotFile(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_not_file(&mut self, v: u64) {
        self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::NotFile(v))
    }

    // .protocol.error.RemoteIOError remote_io = 5;

    pub fn remote_io(&self) -> &RemoteIOError {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::RemoteIo(ref v)) => v,
            _ => <RemoteIOError as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_remote_io(&mut self) {
        self.responseErrorType = ::std::option::Option::None;
    }

    pub fn has_remote_io(&self) -> bool {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::RemoteIo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remote_io(&mut self, v: RemoteIOError) {
        self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::RemoteIo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remote_io(&mut self) -> &mut RemoteIOError {
        if let ::std::option::Option::Some(response_error::ResponseErrorType::RemoteIo(_)) = self.responseErrorType {
        } else {
            self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::RemoteIo(RemoteIOError::new()));
        }
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::RemoteIo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remote_io(&mut self) -> RemoteIOError {
        if self.has_remote_io() {
            match self.responseErrorType.take() {
                ::std::option::Option::Some(response_error::ResponseErrorType::RemoteIo(v)) => v,
                _ => panic!(),
            }
        } else {
            RemoteIOError::new()
        }
    }

    // .protocol.error.DnsLookupError dns_lookup = 6;

    pub fn dns_lookup(&self) -> &DnsLookupError {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::DnsLookup(ref v)) => v,
            _ => <DnsLookupError as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_dns_lookup(&mut self) {
        self.responseErrorType = ::std::option::Option::None;
    }

    pub fn has_dns_lookup(&self) -> bool {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::DnsLookup(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_dns_lookup(&mut self, v: DnsLookupError) {
        self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::DnsLookup(v))
    }

    // Mutable pointer to the field.
    pub fn mut_dns_lookup(&mut self) -> &mut DnsLookupError {
        if let ::std::option::Option::Some(response_error::ResponseErrorType::DnsLookup(_)) = self.responseErrorType {
        } else {
            self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::DnsLookup(DnsLookupError::new()));
        }
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::DnsLookup(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_dns_lookup(&mut self) -> DnsLookupError {
        if self.has_dns_lookup() {
            match self.responseErrorType.take() {
                ::std::option::Option::Some(response_error::ResponseErrorType::DnsLookup(v)) => v,
                _ => panic!(),
            }
        } else {
            DnsLookupError::new()
        }
    }

    // .protocol.error.RemoteError remote_error = 7;

    pub fn remote_error(&self) -> &RemoteError {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::RemoteError(ref v)) => v,
            _ => <RemoteError as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_remote_error(&mut self) {
        self.responseErrorType = ::std::option::Option::None;
    }

    pub fn has_remote_error(&self) -> bool {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::RemoteError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remote_error(&mut self, v: RemoteError) {
        self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::RemoteError(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remote_error(&mut self) -> &mut RemoteError {
        if let ::std::option::Option::Some(response_error::ResponseErrorType::RemoteError(_)) = self.responseErrorType {
        } else {
            self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::RemoteError(RemoteError::new()));
        }
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::RemoteError(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remote_error(&mut self) -> RemoteError {
        if self.has_remote_error() {
            match self.responseErrorType.take() {
                ::std::option::Option::Some(response_error::ResponseErrorType::RemoteError(v)) => v,
                _ => panic!(),
            }
        } else {
            RemoteError::new()
        }
    }

    // int32 port_already_stolen = 8;

    pub fn port_already_stolen(&self) -> i32 {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::PortAlreadyStolen(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_port_already_stolen(&mut self) {
        self.responseErrorType = ::std::option::Option::None;
    }

    pub fn has_port_already_stolen(&self) -> bool {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::PortAlreadyStolen(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_port_already_stolen(&mut self, v: i32) {
        self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::PortAlreadyStolen(v))
    }

    // bool not_implemented = 9;

    pub fn not_implemented(&self) -> bool {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::NotImplemented(v)) => v,
            _ => false,
        }
    }

    pub fn clear_not_implemented(&mut self) {
        self.responseErrorType = ::std::option::Option::None;
    }

    pub fn has_not_implemented(&self) -> bool {
        match self.responseErrorType {
            ::std::option::Option::Some(response_error::ResponseErrorType::NotImplemented(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_not_implemented(&mut self, v: bool) {
        self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::NotImplemented(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "allocation_failure",
            ResponseError::has_allocation_failure,
            ResponseError::allocation_failure,
            ResponseError::set_allocation_failure,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "not_found",
            ResponseError::has_not_found,
            ResponseError::not_found,
            ResponseError::set_not_found,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "not_directory",
            ResponseError::has_not_directory,
            ResponseError::not_directory,
            ResponseError::set_not_directory,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "not_file",
            ResponseError::has_not_file,
            ResponseError::not_file,
            ResponseError::set_not_file,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RemoteIOError>(
            "remote_io",
            ResponseError::has_remote_io,
            ResponseError::remote_io,
            ResponseError::mut_remote_io,
            ResponseError::set_remote_io,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DnsLookupError>(
            "dns_lookup",
            ResponseError::has_dns_lookup,
            ResponseError::dns_lookup,
            ResponseError::mut_dns_lookup,
            ResponseError::set_dns_lookup,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RemoteError>(
            "remote_error",
            ResponseError::has_remote_error,
            ResponseError::remote_error,
            ResponseError::mut_remote_error,
            ResponseError::set_remote_error,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "port_already_stolen",
            ResponseError::has_port_already_stolen,
            ResponseError::port_already_stolen,
            ResponseError::set_port_already_stolen,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "not_implemented",
            ResponseError::has_not_implemented,
            ResponseError::not_implemented,
            ResponseError::set_not_implemented,
        ));
        oneofs.push(response_error::ResponseErrorType::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResponseError>(
            "ResponseError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResponseError {
    const NAME: &'static str = "ResponseError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::AllocationFailure(is.read_string()?));
                },
                16 => {
                    self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::NotFound(is.read_uint64()?));
                },
                24 => {
                    self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::NotDirectory(is.read_uint64()?));
                },
                32 => {
                    self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::NotFile(is.read_uint64()?));
                },
                42 => {
                    self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::RemoteIo(is.read_message()?));
                },
                50 => {
                    self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::DnsLookup(is.read_message()?));
                },
                58 => {
                    self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::RemoteError(is.read_message()?));
                },
                64 => {
                    self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::PortAlreadyStolen(is.read_int32()?));
                },
                72 => {
                    self.responseErrorType = ::std::option::Option::Some(response_error::ResponseErrorType::NotImplemented(is.read_bool()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.responseErrorType {
            match v {
                &response_error::ResponseErrorType::AllocationFailure(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &response_error::ResponseErrorType::NotFound(v) => {
                    my_size += ::protobuf::rt::uint64_size(2, v);
                },
                &response_error::ResponseErrorType::NotDirectory(v) => {
                    my_size += ::protobuf::rt::uint64_size(3, v);
                },
                &response_error::ResponseErrorType::NotFile(v) => {
                    my_size += ::protobuf::rt::uint64_size(4, v);
                },
                &response_error::ResponseErrorType::RemoteIo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response_error::ResponseErrorType::DnsLookup(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response_error::ResponseErrorType::RemoteError(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response_error::ResponseErrorType::PortAlreadyStolen(v) => {
                    my_size += ::protobuf::rt::int32_size(8, v);
                },
                &response_error::ResponseErrorType::NotImplemented(v) => {
                    my_size += 1 + 1;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.responseErrorType {
            match v {
                &response_error::ResponseErrorType::AllocationFailure(ref v) => {
                    os.write_string(1, v)?;
                },
                &response_error::ResponseErrorType::NotFound(v) => {
                    os.write_uint64(2, v)?;
                },
                &response_error::ResponseErrorType::NotDirectory(v) => {
                    os.write_uint64(3, v)?;
                },
                &response_error::ResponseErrorType::NotFile(v) => {
                    os.write_uint64(4, v)?;
                },
                &response_error::ResponseErrorType::RemoteIo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &response_error::ResponseErrorType::DnsLookup(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &response_error::ResponseErrorType::RemoteError(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &response_error::ResponseErrorType::PortAlreadyStolen(v) => {
                    os.write_int32(8, v)?;
                },
                &response_error::ResponseErrorType::NotImplemented(v) => {
                    os.write_bool(9, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResponseError {
        ResponseError::new()
    }

    fn clear(&mut self) {
        self.responseErrorType = ::std::option::Option::None;
        self.responseErrorType = ::std::option::Option::None;
        self.responseErrorType = ::std::option::Option::None;
        self.responseErrorType = ::std::option::Option::None;
        self.responseErrorType = ::std::option::Option::None;
        self.responseErrorType = ::std::option::Option::None;
        self.responseErrorType = ::std::option::Option::None;
        self.responseErrorType = ::std::option::Option::None;
        self.responseErrorType = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResponseError {
        static instance: ResponseError = ResponseError {
            responseErrorType: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResponseError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResponseError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResponseError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ResponseError`
pub mod response_error {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protocol.error.ResponseError.responseErrorType)
    pub enum ResponseErrorType {
        // @@protoc_insertion_point(oneof_field:protocol.error.ResponseError.allocation_failure)
        AllocationFailure(::std::string::String),
        // @@protoc_insertion_point(oneof_field:protocol.error.ResponseError.not_found)
        NotFound(u64),
        // @@protoc_insertion_point(oneof_field:protocol.error.ResponseError.not_directory)
        NotDirectory(u64),
        // @@protoc_insertion_point(oneof_field:protocol.error.ResponseError.not_file)
        NotFile(u64),
        // @@protoc_insertion_point(oneof_field:protocol.error.ResponseError.remote_io)
        RemoteIo(super::RemoteIOError),
        // @@protoc_insertion_point(oneof_field:protocol.error.ResponseError.dns_lookup)
        DnsLookup(super::DnsLookupError),
        // @@protoc_insertion_point(oneof_field:protocol.error.ResponseError.remote_error)
        RemoteError(super::RemoteError),
        // @@protoc_insertion_point(oneof_field:protocol.error.ResponseError.port_already_stolen)
        PortAlreadyStolen(i32),
        // @@protoc_insertion_point(oneof_field:protocol.error.ResponseError.not_implemented)
        NotImplemented(bool),
    }

    impl ::protobuf::Oneof for ResponseErrorType {
    }

    impl ::protobuf::OneofFull for ResponseErrorType {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ResponseError as ::protobuf::MessageFull>::descriptor().oneof_by_name("responseErrorType").unwrap()).clone()
        }
    }

    impl ResponseErrorType {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ResponseErrorType>("responseErrorType")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.error.RemoteIOError)
pub struct RemoteIOError {
    // message fields
    // @@protoc_insertion_point(field:protocol.error.RemoteIOError.raw_os_error)
    pub raw_os_error: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:protocol.error.RemoteIOError.kind)
    pub kind: ::protobuf::MessageField<ErrorKindInternal>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.error.RemoteIOError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemoteIOError {
    fn default() -> &'a RemoteIOError {
        <RemoteIOError as ::protobuf::Message>::default_instance()
    }
}

impl RemoteIOError {
    pub fn new() -> RemoteIOError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "raw_os_error",
            |m: &RemoteIOError| { &m.raw_os_error },
            |m: &mut RemoteIOError| { &mut m.raw_os_error },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ErrorKindInternal>(
            "kind",
            |m: &RemoteIOError| { &m.kind },
            |m: &mut RemoteIOError| { &mut m.kind },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RemoteIOError>(
            "RemoteIOError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RemoteIOError {
    const NAME: &'static str = "RemoteIOError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.raw_os_error = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.kind)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.raw_os_error {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.kind.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.raw_os_error {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.kind.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemoteIOError {
        RemoteIOError::new()
    }

    fn clear(&mut self) {
        self.raw_os_error = ::std::option::Option::None;
        self.kind.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemoteIOError {
        static instance: RemoteIOError = RemoteIOError {
            raw_os_error: ::std::option::Option::None,
            kind: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RemoteIOError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RemoteIOError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RemoteIOError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteIOError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.error.DnsLookupError)
pub struct DnsLookupError {
    // message fields
    // @@protoc_insertion_point(field:protocol.error.DnsLookupError.kind)
    pub kind: ::protobuf::MessageField<ErrorKindInternal>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.error.DnsLookupError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DnsLookupError {
    fn default() -> &'a DnsLookupError {
        <DnsLookupError as ::protobuf::Message>::default_instance()
    }
}

impl DnsLookupError {
    pub fn new() -> DnsLookupError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ErrorKindInternal>(
            "kind",
            |m: &DnsLookupError| { &m.kind },
            |m: &mut DnsLookupError| { &mut m.kind },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DnsLookupError>(
            "DnsLookupError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DnsLookupError {
    const NAME: &'static str = "DnsLookupError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.kind)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.kind.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.kind.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DnsLookupError {
        DnsLookupError::new()
    }

    fn clear(&mut self) {
        self.kind.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DnsLookupError {
        static instance: DnsLookupError = DnsLookupError {
            kind: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DnsLookupError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DnsLookupError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DnsLookupError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DnsLookupError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.error.BadHttpFilterRegexError)
pub struct BadHttpFilterRegexError {
    // message fields
    // @@protoc_insertion_point(field:protocol.error.BadHttpFilterRegexError.filter)
    pub filter: ::std::string::String,
    // @@protoc_insertion_point(field:protocol.error.BadHttpFilterRegexError.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.error.BadHttpFilterRegexError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BadHttpFilterRegexError {
    fn default() -> &'a BadHttpFilterRegexError {
        <BadHttpFilterRegexError as ::protobuf::Message>::default_instance()
    }
}

impl BadHttpFilterRegexError {
    pub fn new() -> BadHttpFilterRegexError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "filter",
            |m: &BadHttpFilterRegexError| { &m.filter },
            |m: &mut BadHttpFilterRegexError| { &mut m.filter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &BadHttpFilterRegexError| { &m.message },
            |m: &mut BadHttpFilterRegexError| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BadHttpFilterRegexError>(
            "BadHttpFilterRegexError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BadHttpFilterRegexError {
    const NAME: &'static str = "BadHttpFilterRegexError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.filter = is.read_string()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filter);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.filter.is_empty() {
            os.write_string(1, &self.filter)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BadHttpFilterRegexError {
        BadHttpFilterRegexError::new()
    }

    fn clear(&mut self) {
        self.filter.clear();
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BadHttpFilterRegexError {
        static instance: BadHttpFilterRegexError = BadHttpFilterRegexError {
            filter: ::std::string::String::new(),
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BadHttpFilterRegexError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BadHttpFilterRegexError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BadHttpFilterRegexError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BadHttpFilterRegexError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.error.RemoteError)
pub struct RemoteError {
    // message oneof groups
    pub remoteErrorType: ::std::option::Option<remote_error::RemoteErrorType>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.error.RemoteError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemoteError {
    fn default() -> &'a RemoteError {
        <RemoteError as ::protobuf::Message>::default_instance()
    }
}

impl RemoteError {
    pub fn new() -> RemoteError {
        ::std::default::Default::default()
    }

    // bool nameserver_not_found = 1;

    pub fn nameserver_not_found(&self) -> bool {
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::NameserverNotFound(v)) => v,
            _ => false,
        }
    }

    pub fn clear_nameserver_not_found(&mut self) {
        self.remoteErrorType = ::std::option::Option::None;
    }

    pub fn has_nameserver_not_found(&self) -> bool {
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::NameserverNotFound(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nameserver_not_found(&mut self, v: bool) {
        self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::NameserverNotFound(v))
    }

    // string address_parsing = 2;

    pub fn address_parsing(&self) -> &str {
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::AddressParsing(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_address_parsing(&mut self) {
        self.remoteErrorType = ::std::option::Option::None;
    }

    pub fn has_address_parsing(&self) -> bool {
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::AddressParsing(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_address_parsing(&mut self, v: ::std::string::String) {
        self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::AddressParsing(v))
    }

    // Mutable pointer to the field.
    pub fn mut_address_parsing(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(remote_error::RemoteErrorType::AddressParsing(_)) = self.remoteErrorType {
        } else {
            self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::AddressParsing(::std::string::String::new()));
        }
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::AddressParsing(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_address_parsing(&mut self) -> ::std::string::String {
        if self.has_address_parsing() {
            match self.remoteErrorType.take() {
                ::std::option::Option::Some(remote_error::RemoteErrorType::AddressParsing(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .protocol.net.SocketAddr InvalidAddress = 3;

    pub fn InvalidAddress(&self) -> &super::net::SocketAddr {
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::InvalidAddress(ref v)) => v,
            _ => <super::net::SocketAddr as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_InvalidAddress(&mut self) {
        self.remoteErrorType = ::std::option::Option::None;
    }

    pub fn has_InvalidAddress(&self) -> bool {
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::InvalidAddress(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_InvalidAddress(&mut self, v: super::net::SocketAddr) {
        self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::InvalidAddress(v))
    }

    // Mutable pointer to the field.
    pub fn mut_InvalidAddress(&mut self) -> &mut super::net::SocketAddr {
        if let ::std::option::Option::Some(remote_error::RemoteErrorType::InvalidAddress(_)) = self.remoteErrorType {
        } else {
            self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::InvalidAddress(super::net::SocketAddr::new()));
        }
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::InvalidAddress(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_InvalidAddress(&mut self) -> super::net::SocketAddr {
        if self.has_InvalidAddress() {
            match self.remoteErrorType.take() {
                ::std::option::Option::Some(remote_error::RemoteErrorType::InvalidAddress(v)) => v,
                _ => panic!(),
            }
        } else {
            super::net::SocketAddr::new()
        }
    }

    // .protocol.net.SocketAddr connect_timed_out = 4;

    pub fn connect_timed_out(&self) -> &super::net::SocketAddr {
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::ConnectTimedOut(ref v)) => v,
            _ => <super::net::SocketAddr as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_connect_timed_out(&mut self) {
        self.remoteErrorType = ::std::option::Option::None;
    }

    pub fn has_connect_timed_out(&self) -> bool {
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::ConnectTimedOut(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_connect_timed_out(&mut self, v: super::net::SocketAddr) {
        self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::ConnectTimedOut(v))
    }

    // Mutable pointer to the field.
    pub fn mut_connect_timed_out(&mut self) -> &mut super::net::SocketAddr {
        if let ::std::option::Option::Some(remote_error::RemoteErrorType::ConnectTimedOut(_)) = self.remoteErrorType {
        } else {
            self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::ConnectTimedOut(super::net::SocketAddr::new()));
        }
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::ConnectTimedOut(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_connect_timed_out(&mut self) -> super::net::SocketAddr {
        if self.has_connect_timed_out() {
            match self.remoteErrorType.take() {
                ::std::option::Option::Some(remote_error::RemoteErrorType::ConnectTimedOut(v)) => v,
                _ => panic!(),
            }
        } else {
            super::net::SocketAddr::new()
        }
    }

    // .protocol.error.BadHttpFilterRegexError bad_http_filter_regex = 5;

    pub fn bad_http_filter_regex(&self) -> &BadHttpFilterRegexError {
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::BadHttpFilterRegex(ref v)) => v,
            _ => <BadHttpFilterRegexError as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bad_http_filter_regex(&mut self) {
        self.remoteErrorType = ::std::option::Option::None;
    }

    pub fn has_bad_http_filter_regex(&self) -> bool {
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::BadHttpFilterRegex(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bad_http_filter_regex(&mut self, v: BadHttpFilterRegexError) {
        self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::BadHttpFilterRegex(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bad_http_filter_regex(&mut self) -> &mut BadHttpFilterRegexError {
        if let ::std::option::Option::Some(remote_error::RemoteErrorType::BadHttpFilterRegex(_)) = self.remoteErrorType {
        } else {
            self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::BadHttpFilterRegex(BadHttpFilterRegexError::new()));
        }
        match self.remoteErrorType {
            ::std::option::Option::Some(remote_error::RemoteErrorType::BadHttpFilterRegex(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bad_http_filter_regex(&mut self) -> BadHttpFilterRegexError {
        if self.has_bad_http_filter_regex() {
            match self.remoteErrorType.take() {
                ::std::option::Option::Some(remote_error::RemoteErrorType::BadHttpFilterRegex(v)) => v,
                _ => panic!(),
            }
        } else {
            BadHttpFilterRegexError::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "nameserver_not_found",
            RemoteError::has_nameserver_not_found,
            RemoteError::nameserver_not_found,
            RemoteError::set_nameserver_not_found,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "address_parsing",
            RemoteError::has_address_parsing,
            RemoteError::address_parsing,
            RemoteError::set_address_parsing,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::net::SocketAddr>(
            "InvalidAddress",
            RemoteError::has_InvalidAddress,
            RemoteError::InvalidAddress,
            RemoteError::mut_InvalidAddress,
            RemoteError::set_InvalidAddress,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::net::SocketAddr>(
            "connect_timed_out",
            RemoteError::has_connect_timed_out,
            RemoteError::connect_timed_out,
            RemoteError::mut_connect_timed_out,
            RemoteError::set_connect_timed_out,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, BadHttpFilterRegexError>(
            "bad_http_filter_regex",
            RemoteError::has_bad_http_filter_regex,
            RemoteError::bad_http_filter_regex,
            RemoteError::mut_bad_http_filter_regex,
            RemoteError::set_bad_http_filter_regex,
        ));
        oneofs.push(remote_error::RemoteErrorType::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RemoteError>(
            "RemoteError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RemoteError {
    const NAME: &'static str = "RemoteError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::NameserverNotFound(is.read_bool()?));
                },
                18 => {
                    self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::AddressParsing(is.read_string()?));
                },
                26 => {
                    self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::InvalidAddress(is.read_message()?));
                },
                34 => {
                    self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::ConnectTimedOut(is.read_message()?));
                },
                42 => {
                    self.remoteErrorType = ::std::option::Option::Some(remote_error::RemoteErrorType::BadHttpFilterRegex(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.remoteErrorType {
            match v {
                &remote_error::RemoteErrorType::NameserverNotFound(v) => {
                    my_size += 1 + 1;
                },
                &remote_error::RemoteErrorType::AddressParsing(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &remote_error::RemoteErrorType::InvalidAddress(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &remote_error::RemoteErrorType::ConnectTimedOut(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &remote_error::RemoteErrorType::BadHttpFilterRegex(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.remoteErrorType {
            match v {
                &remote_error::RemoteErrorType::NameserverNotFound(v) => {
                    os.write_bool(1, v)?;
                },
                &remote_error::RemoteErrorType::AddressParsing(ref v) => {
                    os.write_string(2, v)?;
                },
                &remote_error::RemoteErrorType::InvalidAddress(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &remote_error::RemoteErrorType::ConnectTimedOut(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &remote_error::RemoteErrorType::BadHttpFilterRegex(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemoteError {
        RemoteError::new()
    }

    fn clear(&mut self) {
        self.remoteErrorType = ::std::option::Option::None;
        self.remoteErrorType = ::std::option::Option::None;
        self.remoteErrorType = ::std::option::Option::None;
        self.remoteErrorType = ::std::option::Option::None;
        self.remoteErrorType = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemoteError {
        static instance: RemoteError = RemoteError {
            remoteErrorType: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RemoteError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RemoteError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RemoteError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RemoteError`
pub mod remote_error {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protocol.error.RemoteError.remoteErrorType)
    pub enum RemoteErrorType {
        // @@protoc_insertion_point(oneof_field:protocol.error.RemoteError.nameserver_not_found)
        NameserverNotFound(bool),
        // @@protoc_insertion_point(oneof_field:protocol.error.RemoteError.address_parsing)
        AddressParsing(::std::string::String),
        // @@protoc_insertion_point(oneof_field:protocol.error.RemoteError.InvalidAddress)
        InvalidAddress(super::super::net::SocketAddr),
        // @@protoc_insertion_point(oneof_field:protocol.error.RemoteError.connect_timed_out)
        ConnectTimedOut(super::super::net::SocketAddr),
        // @@protoc_insertion_point(oneof_field:protocol.error.RemoteError.bad_http_filter_regex)
        BadHttpFilterRegex(super::BadHttpFilterRegexError),
    }

    impl ::protobuf::Oneof for RemoteErrorType {
    }

    impl ::protobuf::OneofFull for RemoteErrorType {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RemoteError as ::protobuf::MessageFull>::descriptor().oneof_by_name("remoteErrorType").unwrap()).clone()
        }
    }

    impl RemoteErrorType {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<RemoteErrorType>("remoteErrorType")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protocol.error.ErrorKind)
pub enum ErrorKind {
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.NotFound)
    NotFound = 0,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.PermissionDenied)
    PermissionDenied = 1,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.ConnectionRefused)
    ConnectionRefused = 2,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.ConnectionReset)
    ConnectionReset = 3,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.HostUnreachable)
    HostUnreachable = 4,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.NetworkUnreachable)
    NetworkUnreachable = 5,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.ConnectionAborted)
    ConnectionAborted = 6,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.NotConnected)
    NotConnected = 7,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.AddrInUse)
    AddrInUse = 8,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.AddrNotAvailable)
    AddrNotAvailable = 9,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.NetworkDown)
    NetworkDown = 10,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.BrokenPipe)
    BrokenPipe = 11,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.AlreadyExists)
    AlreadyExists = 12,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.WouldBlock)
    WouldBlock = 13,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.NotADirectory)
    NotADirectory = 14,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.IsADirectory)
    IsADirectory = 16,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.DirectoryNotEmpty)
    DirectoryNotEmpty = 17,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.ReadOnlyFilesystem)
    ReadOnlyFilesystem = 18,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.FilesystemLoop)
    FilesystemLoop = 19,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.StaleNetworkFileHandle)
    StaleNetworkFileHandle = 20,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.InvalidInput)
    InvalidInput = 21,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.InvalidData)
    InvalidData = 22,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.TimedOut)
    TimedOut = 23,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.WriteZero)
    WriteZero = 24,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.StorageFull)
    StorageFull = 25,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.NotSeekable)
    NotSeekable = 26,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.FilesystemQuotaExceeded)
    FilesystemQuotaExceeded = 27,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.FileTooLarge)
    FileTooLarge = 28,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.ResourceBusy)
    ResourceBusy = 29,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.ExecutableFileBusy)
    ExecutableFileBusy = 30,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.Deadlock)
    Deadlock = 31,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.CrossesDevices)
    CrossesDevices = 32,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.TooManyLinks)
    TooManyLinks = 33,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.InvalidFilename)
    InvalidFilename = 34,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.ArgumentListTooLong)
    ArgumentListTooLong = 35,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.Interrupted)
    Interrupted = 36,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.Unsupported)
    Unsupported = 37,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.UnexpectedEof)
    UnexpectedEof = 38,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.OutOfMemory)
    OutOfMemory = 39,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.Other)
    Other = 40,
    // @@protoc_insertion_point(enum_value:protocol.error.ErrorKind.Unknown)
    Unknown = 41,
}

impl ::protobuf::Enum for ErrorKind {
    const NAME: &'static str = "ErrorKind";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorKind> {
        match value {
            0 => ::std::option::Option::Some(ErrorKind::NotFound),
            1 => ::std::option::Option::Some(ErrorKind::PermissionDenied),
            2 => ::std::option::Option::Some(ErrorKind::ConnectionRefused),
            3 => ::std::option::Option::Some(ErrorKind::ConnectionReset),
            4 => ::std::option::Option::Some(ErrorKind::HostUnreachable),
            5 => ::std::option::Option::Some(ErrorKind::NetworkUnreachable),
            6 => ::std::option::Option::Some(ErrorKind::ConnectionAborted),
            7 => ::std::option::Option::Some(ErrorKind::NotConnected),
            8 => ::std::option::Option::Some(ErrorKind::AddrInUse),
            9 => ::std::option::Option::Some(ErrorKind::AddrNotAvailable),
            10 => ::std::option::Option::Some(ErrorKind::NetworkDown),
            11 => ::std::option::Option::Some(ErrorKind::BrokenPipe),
            12 => ::std::option::Option::Some(ErrorKind::AlreadyExists),
            13 => ::std::option::Option::Some(ErrorKind::WouldBlock),
            14 => ::std::option::Option::Some(ErrorKind::NotADirectory),
            16 => ::std::option::Option::Some(ErrorKind::IsADirectory),
            17 => ::std::option::Option::Some(ErrorKind::DirectoryNotEmpty),
            18 => ::std::option::Option::Some(ErrorKind::ReadOnlyFilesystem),
            19 => ::std::option::Option::Some(ErrorKind::FilesystemLoop),
            20 => ::std::option::Option::Some(ErrorKind::StaleNetworkFileHandle),
            21 => ::std::option::Option::Some(ErrorKind::InvalidInput),
            22 => ::std::option::Option::Some(ErrorKind::InvalidData),
            23 => ::std::option::Option::Some(ErrorKind::TimedOut),
            24 => ::std::option::Option::Some(ErrorKind::WriteZero),
            25 => ::std::option::Option::Some(ErrorKind::StorageFull),
            26 => ::std::option::Option::Some(ErrorKind::NotSeekable),
            27 => ::std::option::Option::Some(ErrorKind::FilesystemQuotaExceeded),
            28 => ::std::option::Option::Some(ErrorKind::FileTooLarge),
            29 => ::std::option::Option::Some(ErrorKind::ResourceBusy),
            30 => ::std::option::Option::Some(ErrorKind::ExecutableFileBusy),
            31 => ::std::option::Option::Some(ErrorKind::Deadlock),
            32 => ::std::option::Option::Some(ErrorKind::CrossesDevices),
            33 => ::std::option::Option::Some(ErrorKind::TooManyLinks),
            34 => ::std::option::Option::Some(ErrorKind::InvalidFilename),
            35 => ::std::option::Option::Some(ErrorKind::ArgumentListTooLong),
            36 => ::std::option::Option::Some(ErrorKind::Interrupted),
            37 => ::std::option::Option::Some(ErrorKind::Unsupported),
            38 => ::std::option::Option::Some(ErrorKind::UnexpectedEof),
            39 => ::std::option::Option::Some(ErrorKind::OutOfMemory),
            40 => ::std::option::Option::Some(ErrorKind::Other),
            41 => ::std::option::Option::Some(ErrorKind::Unknown),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ErrorKind] = &[
        ErrorKind::NotFound,
        ErrorKind::PermissionDenied,
        ErrorKind::ConnectionRefused,
        ErrorKind::ConnectionReset,
        ErrorKind::HostUnreachable,
        ErrorKind::NetworkUnreachable,
        ErrorKind::ConnectionAborted,
        ErrorKind::NotConnected,
        ErrorKind::AddrInUse,
        ErrorKind::AddrNotAvailable,
        ErrorKind::NetworkDown,
        ErrorKind::BrokenPipe,
        ErrorKind::AlreadyExists,
        ErrorKind::WouldBlock,
        ErrorKind::NotADirectory,
        ErrorKind::IsADirectory,
        ErrorKind::DirectoryNotEmpty,
        ErrorKind::ReadOnlyFilesystem,
        ErrorKind::FilesystemLoop,
        ErrorKind::StaleNetworkFileHandle,
        ErrorKind::InvalidInput,
        ErrorKind::InvalidData,
        ErrorKind::TimedOut,
        ErrorKind::WriteZero,
        ErrorKind::StorageFull,
        ErrorKind::NotSeekable,
        ErrorKind::FilesystemQuotaExceeded,
        ErrorKind::FileTooLarge,
        ErrorKind::ResourceBusy,
        ErrorKind::ExecutableFileBusy,
        ErrorKind::Deadlock,
        ErrorKind::CrossesDevices,
        ErrorKind::TooManyLinks,
        ErrorKind::InvalidFilename,
        ErrorKind::ArgumentListTooLong,
        ErrorKind::Interrupted,
        ErrorKind::Unsupported,
        ErrorKind::UnexpectedEof,
        ErrorKind::OutOfMemory,
        ErrorKind::Other,
        ErrorKind::Unknown,
    ];
}

impl ::protobuf::EnumFull for ErrorKind {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ErrorKind").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ErrorKind::NotFound => 0,
            ErrorKind::PermissionDenied => 1,
            ErrorKind::ConnectionRefused => 2,
            ErrorKind::ConnectionReset => 3,
            ErrorKind::HostUnreachable => 4,
            ErrorKind::NetworkUnreachable => 5,
            ErrorKind::ConnectionAborted => 6,
            ErrorKind::NotConnected => 7,
            ErrorKind::AddrInUse => 8,
            ErrorKind::AddrNotAvailable => 9,
            ErrorKind::NetworkDown => 10,
            ErrorKind::BrokenPipe => 11,
            ErrorKind::AlreadyExists => 12,
            ErrorKind::WouldBlock => 13,
            ErrorKind::NotADirectory => 14,
            ErrorKind::IsADirectory => 15,
            ErrorKind::DirectoryNotEmpty => 16,
            ErrorKind::ReadOnlyFilesystem => 17,
            ErrorKind::FilesystemLoop => 18,
            ErrorKind::StaleNetworkFileHandle => 19,
            ErrorKind::InvalidInput => 20,
            ErrorKind::InvalidData => 21,
            ErrorKind::TimedOut => 22,
            ErrorKind::WriteZero => 23,
            ErrorKind::StorageFull => 24,
            ErrorKind::NotSeekable => 25,
            ErrorKind::FilesystemQuotaExceeded => 26,
            ErrorKind::FileTooLarge => 27,
            ErrorKind::ResourceBusy => 28,
            ErrorKind::ExecutableFileBusy => 29,
            ErrorKind::Deadlock => 30,
            ErrorKind::CrossesDevices => 31,
            ErrorKind::TooManyLinks => 32,
            ErrorKind::InvalidFilename => 33,
            ErrorKind::ArgumentListTooLong => 34,
            ErrorKind::Interrupted => 35,
            ErrorKind::Unsupported => 36,
            ErrorKind::UnexpectedEof => 37,
            ErrorKind::OutOfMemory => 38,
            ErrorKind::Other => 39,
            ErrorKind::Unknown => 40,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ErrorKind {
    fn default() -> Self {
        ErrorKind::NotFound
    }
}

impl ErrorKind {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ErrorKind>("ErrorKind")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0berror.proto\x12\x0eprotocol.error\x1a\tnet.proto\"~\n\x11ErrorKind\
    Internal\x12-\n\x04kind\x18\x01\x20\x01(\x0e2\x19.protocol.error.ErrorKi\
    ndR\x04kind\x12(\n\runknown_value\x18\x02\x20\x01(\tH\0R\x0cunknownValue\
    \x88\x01\x01B\x10\n\x0e_unknown_value\"\xd6\x03\n\rResponseError\x12/\n\
    \x12allocation_failure\x18\x01\x20\x01(\tH\0R\x11allocationFailure\x12\
    \x1d\n\tnot_found\x18\x02\x20\x01(\x04H\0R\x08notFound\x12%\n\rnot_direc\
    tory\x18\x03\x20\x01(\x04H\0R\x0cnotDirectory\x12\x1b\n\x08not_file\x18\
    \x04\x20\x01(\x04H\0R\x07notFile\x12<\n\tremote_io\x18\x05\x20\x01(\x0b2\
    \x1d.protocol.error.RemoteIOErrorH\0R\x08remoteIo\x12?\n\ndns_lookup\x18\
    \x06\x20\x01(\x0b2\x1e.protocol.error.DnsLookupErrorH\0R\tdnsLookup\x12@\
    \n\x0cremote_error\x18\x07\x20\x01(\x0b2\x1b.protocol.error.RemoteErrorH\
    \0R\x0bremoteError\x120\n\x13port_already_stolen\x18\x08\x20\x01(\x05H\0\
    R\x11portAlreadyStolen\x12)\n\x0fnot_implemented\x18\t\x20\x01(\x08H\0R\
    \x0enotImplementedB\x13\n\x11responseErrorType\"~\n\rRemoteIOError\x12%\
    \n\x0craw_os_error\x18\x01\x20\x01(\x05H\0R\nrawOsError\x88\x01\x01\x125\
    \n\x04kind\x18\x02\x20\x01(\x0b2!.protocol.error.ErrorKindInternalR\x04k\
    indB\x0f\n\r_raw_os_error\"G\n\x0eDnsLookupError\x125\n\x04kind\x18\x01\
    \x20\x01(\x0b2!.protocol.error.ErrorKindInternalR\x04kind\"K\n\x17BadHtt\
    pFilterRegexError\x12\x16\n\x06filter\x18\x01\x20\x01(\tR\x06filter\x12\
    \x18\n\x07message\x18\x02\x20\x01(\tR\x07message\"\xe9\x02\n\x0bRemoteEr\
    ror\x122\n\x14nameserver_not_found\x18\x01\x20\x01(\x08H\0R\x12nameserve\
    rNotFound\x12)\n\x0faddress_parsing\x18\x02\x20\x01(\tH\0R\x0eaddressPar\
    sing\x12B\n\x0eInvalidAddress\x18\x03\x20\x01(\x0b2\x18.protocol.net.Soc\
    ketAddrH\0R\x0eInvalidAddress\x12F\n\x11connect_timed_out\x18\x04\x20\
    \x01(\x0b2\x18.protocol.net.SocketAddrH\0R\x0fconnectTimedOut\x12\\\n\
    \x15bad_http_filter_regex\x18\x05\x20\x01(\x0b2'.protocol.error.BadHttpF\
    ilterRegexErrorH\0R\x12badHttpFilterRegexB\x11\n\x0fremoteErrorType*\x99\
    \x06\n\tErrorKind\x12\x0c\n\x08NotFound\x10\0\x12\x14\n\x10PermissionDen\
    ied\x10\x01\x12\x15\n\x11ConnectionRefused\x10\x02\x12\x13\n\x0fConnecti\
    onReset\x10\x03\x12\x13\n\x0fHostUnreachable\x10\x04\x12\x16\n\x12Networ\
    kUnreachable\x10\x05\x12\x15\n\x11ConnectionAborted\x10\x06\x12\x10\n\
    \x0cNotConnected\x10\x07\x12\r\n\tAddrInUse\x10\x08\x12\x14\n\x10AddrNot\
    Available\x10\t\x12\x0f\n\x0bNetworkDown\x10\n\x12\x0e\n\nBrokenPipe\x10\
    \x0b\x12\x11\n\rAlreadyExists\x10\x0c\x12\x0e\n\nWouldBlock\x10\r\x12\
    \x11\n\rNotADirectory\x10\x0e\x12\x10\n\x0cIsADirectory\x10\x10\x12\x15\
    \n\x11DirectoryNotEmpty\x10\x11\x12\x16\n\x12ReadOnlyFilesystem\x10\x12\
    \x12\x12\n\x0eFilesystemLoop\x10\x13\x12\x1a\n\x16StaleNetworkFileHandle\
    \x10\x14\x12\x10\n\x0cInvalidInput\x10\x15\x12\x0f\n\x0bInvalidData\x10\
    \x16\x12\x0c\n\x08TimedOut\x10\x17\x12\r\n\tWriteZero\x10\x18\x12\x0f\n\
    \x0bStorageFull\x10\x19\x12\x0f\n\x0bNotSeekable\x10\x1a\x12\x1b\n\x17Fi\
    lesystemQuotaExceeded\x10\x1b\x12\x10\n\x0cFileTooLarge\x10\x1c\x12\x10\
    \n\x0cResourceBusy\x10\x1d\x12\x16\n\x12ExecutableFileBusy\x10\x1e\x12\
    \x0c\n\x08Deadlock\x10\x1f\x12\x12\n\x0eCrossesDevices\x10\x20\x12\x10\n\
    \x0cTooManyLinks\x10!\x12\x13\n\x0fInvalidFilename\x10\"\x12\x17\n\x13Ar\
    gumentListTooLong\x10#\x12\x0f\n\x0bInterrupted\x10$\x12\x0f\n\x0bUnsupp\
    orted\x10%\x12\x11\n\rUnexpectedEof\x10&\x12\x0f\n\x0bOutOfMemory\x10'\
    \x12\t\n\x05Other\x10(\x12\x0b\n\x07Unknown\x10)J\xb7\x18\n\x06\x12\x04\
    \0\0[\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\
    \x17\n\t\n\x02\x03\0\x12\x03\x04\0\x13\n\n\n\x02\x05\0\x12\x04\x06\00\
    \x01\n\n\n\x03\x05\0\x01\x12\x03\x06\x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\
    \x03\x07\x08\x15\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x07\x08\x10\n\x0c\n\
    \x05\x05\0\x02\0\x02\x12\x03\x07\x13\x14\n\x0b\n\x04\x05\0\x02\x01\x12\
    \x03\x08\x04\x19\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x08\x04\x14\n\x0c\
    \n\x05\x05\0\x02\x01\x02\x12\x03\x08\x17\x18\n\x0b\n\x04\x05\0\x02\x02\
    \x12\x03\t\x04\x1a\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\t\x04\x15\n\x0c\
    \n\x05\x05\0\x02\x02\x02\x12\x03\t\x18\x19\n\x0b\n\x04\x05\0\x02\x03\x12\
    \x03\n\x04\x18\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\n\x04\x13\n\x0c\n\
    \x05\x05\0\x02\x03\x02\x12\x03\n\x16\x17\n\x0b\n\x04\x05\0\x02\x04\x12\
    \x03\x0b\x04\x18\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x0b\x04\x13\n\x0c\
    \n\x05\x05\0\x02\x04\x02\x12\x03\x0b\x16\x17\n\x0b\n\x04\x05\0\x02\x05\
    \x12\x03\x0c\x04\x1b\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x0c\x04\x16\n\
    \x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x0c\x19\x1a\n\x0b\n\x04\x05\0\x02\
    \x06\x12\x03\r\x04\x1a\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\r\x04\x15\n\
    \x0c\n\x05\x05\0\x02\x06\x02\x12\x03\r\x18\x19\n\x0b\n\x04\x05\0\x02\x07\
    \x12\x03\x0e\x04\x15\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\x0e\x04\x10\n\
    \x0c\n\x05\x05\0\x02\x07\x02\x12\x03\x0e\x13\x14\n\x0b\n\x04\x05\0\x02\
    \x08\x12\x03\x0f\x04\x12\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03\x0f\x04\r\
    \n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03\x0f\x10\x11\n\x0b\n\x04\x05\0\x02\
    \t\x12\x03\x10\x04\x19\n\x0c\n\x05\x05\0\x02\t\x01\x12\x03\x10\x04\x14\n\
    \x0c\n\x05\x05\0\x02\t\x02\x12\x03\x10\x17\x18\n\x0b\n\x04\x05\0\x02\n\
    \x12\x03\x11\x04\x15\n\x0c\n\x05\x05\0\x02\n\x01\x12\x03\x11\x04\x0f\n\
    \x0c\n\x05\x05\0\x02\n\x02\x12\x03\x11\x12\x14\n\x0b\n\x04\x05\0\x02\x0b\
    \x12\x03\x12\x04\x14\n\x0c\n\x05\x05\0\x02\x0b\x01\x12\x03\x12\x04\x0e\n\
    \x0c\n\x05\x05\0\x02\x0b\x02\x12\x03\x12\x11\x13\n\x0b\n\x04\x05\0\x02\
    \x0c\x12\x03\x13\x04\x17\n\x0c\n\x05\x05\0\x02\x0c\x01\x12\x03\x13\x04\
    \x11\n\x0c\n\x05\x05\0\x02\x0c\x02\x12\x03\x13\x14\x16\n\x0b\n\x04\x05\0\
    \x02\r\x12\x03\x14\x04\x14\n\x0c\n\x05\x05\0\x02\r\x01\x12\x03\x14\x04\
    \x0e\n\x0c\n\x05\x05\0\x02\r\x02\x12\x03\x14\x11\x13\n\x0b\n\x04\x05\0\
    \x02\x0e\x12\x03\x15\x04\x17\n\x0c\n\x05\x05\0\x02\x0e\x01\x12\x03\x15\
    \x04\x11\n\x0c\n\x05\x05\0\x02\x0e\x02\x12\x03\x15\x14\x16\n\x0b\n\x04\
    \x05\0\x02\x0f\x12\x03\x16\x04\x16\n\x0c\n\x05\x05\0\x02\x0f\x01\x12\x03\
    \x16\x04\x10\n\x0c\n\x05\x05\0\x02\x0f\x02\x12\x03\x16\x13\x15\n\x0b\n\
    \x04\x05\0\x02\x10\x12\x03\x17\x04\x1b\n\x0c\n\x05\x05\0\x02\x10\x01\x12\
    \x03\x17\x04\x15\n\x0c\n\x05\x05\0\x02\x10\x02\x12\x03\x17\x18\x1a\n\x0b\
    \n\x04\x05\0\x02\x11\x12\x03\x18\x04\x1c\n\x0c\n\x05\x05\0\x02\x11\x01\
    \x12\x03\x18\x04\x16\n\x0c\n\x05\x05\0\x02\x11\x02\x12\x03\x18\x19\x1b\n\
    \x0b\n\x04\x05\0\x02\x12\x12\x03\x19\x04\x18\n\x0c\n\x05\x05\0\x02\x12\
    \x01\x12\x03\x19\x04\x12\n\x0c\n\x05\x05\0\x02\x12\x02\x12\x03\x19\x15\
    \x17\n\x0b\n\x04\x05\0\x02\x13\x12\x03\x1a\x04\x20\n\x0c\n\x05\x05\0\x02\
    \x13\x01\x12\x03\x1a\x04\x1a\n\x0c\n\x05\x05\0\x02\x13\x02\x12\x03\x1a\
    \x1d\x1f\n\x0b\n\x04\x05\0\x02\x14\x12\x03\x1b\x04\x16\n\x0c\n\x05\x05\0\
    \x02\x14\x01\x12\x03\x1b\x04\x10\n\x0c\n\x05\x05\0\x02\x14\x02\x12\x03\
    \x1b\x13\x15\n\x0b\n\x04\x05\0\x02\x15\x12\x03\x1c\x04\x15\n\x0c\n\x05\
    \x05\0\x02\x15\x01\x12\x03\x1c\x04\x0f\n\x0c\n\x05\x05\0\x02\x15\x02\x12\
    \x03\x1c\x12\x14\n\x0b\n\x04\x05\0\x02\x16\x12\x03\x1d\x04\x12\n\x0c\n\
    \x05\x05\0\x02\x16\x01\x12\x03\x1d\x04\x0c\n\x0c\n\x05\x05\0\x02\x16\x02\
    \x12\x03\x1d\x0f\x11\n\x0b\n\x04\x05\0\x02\x17\x12\x03\x1e\x04\x13\n\x0c\
    \n\x05\x05\0\x02\x17\x01\x12\x03\x1e\x04\r\n\x0c\n\x05\x05\0\x02\x17\x02\
    \x12\x03\x1e\x10\x12\n\x0b\n\x04\x05\0\x02\x18\x12\x03\x1f\x04\x15\n\x0c\
    \n\x05\x05\0\x02\x18\x01\x12\x03\x1f\x04\x0f\n\x0c\n\x05\x05\0\x02\x18\
    \x02\x12\x03\x1f\x12\x14\n\x0b\n\x04\x05\0\x02\x19\x12\x03\x20\x04\x15\n\
    \x0c\n\x05\x05\0\x02\x19\x01\x12\x03\x20\x04\x0f\n\x0c\n\x05\x05\0\x02\
    \x19\x02\x12\x03\x20\x12\x14\n\x0b\n\x04\x05\0\x02\x1a\x12\x03!\x04!\n\
    \x0c\n\x05\x05\0\x02\x1a\x01\x12\x03!\x04\x1b\n\x0c\n\x05\x05\0\x02\x1a\
    \x02\x12\x03!\x1e\x20\n\x0b\n\x04\x05\0\x02\x1b\x12\x03\"\x04\x16\n\x0c\
    \n\x05\x05\0\x02\x1b\x01\x12\x03\"\x04\x10\n\x0c\n\x05\x05\0\x02\x1b\x02\
    \x12\x03\"\x13\x15\n\x0b\n\x04\x05\0\x02\x1c\x12\x03#\x04\x16\n\x0c\n\
    \x05\x05\0\x02\x1c\x01\x12\x03#\x04\x10\n\x0c\n\x05\x05\0\x02\x1c\x02\
    \x12\x03#\x13\x15\n\x0b\n\x04\x05\0\x02\x1d\x12\x03$\x04\x1c\n\x0c\n\x05\
    \x05\0\x02\x1d\x01\x12\x03$\x04\x16\n\x0c\n\x05\x05\0\x02\x1d\x02\x12\
    \x03$\x19\x1b\n\x0b\n\x04\x05\0\x02\x1e\x12\x03%\x04\x12\n\x0c\n\x05\x05\
    \0\x02\x1e\x01\x12\x03%\x04\x0c\n\x0c\n\x05\x05\0\x02\x1e\x02\x12\x03%\
    \x0f\x11\n\x0b\n\x04\x05\0\x02\x1f\x12\x03&\x04\x18\n\x0c\n\x05\x05\0\
    \x02\x1f\x01\x12\x03&\x04\x12\n\x0c\n\x05\x05\0\x02\x1f\x02\x12\x03&\x15\
    \x17\n\x0b\n\x04\x05\0\x02\x20\x12\x03'\x04\x16\n\x0c\n\x05\x05\0\x02\
    \x20\x01\x12\x03'\x04\x10\n\x0c\n\x05\x05\0\x02\x20\x02\x12\x03'\x13\x15\
    \n\x0b\n\x04\x05\0\x02!\x12\x03(\x04\x19\n\x0c\n\x05\x05\0\x02!\x01\x12\
    \x03(\x04\x13\n\x0c\n\x05\x05\0\x02!\x02\x12\x03(\x16\x18\n\x0b\n\x04\
    \x05\0\x02\"\x12\x03)\x04\x1d\n\x0c\n\x05\x05\0\x02\"\x01\x12\x03)\x04\
    \x17\n\x0c\n\x05\x05\0\x02\"\x02\x12\x03)\x1a\x1c\n\x0b\n\x04\x05\0\x02#\
    \x12\x03*\x04\x15\n\x0c\n\x05\x05\0\x02#\x01\x12\x03*\x04\x0f\n\x0c\n\
    \x05\x05\0\x02#\x02\x12\x03*\x12\x14\n\x0b\n\x04\x05\0\x02$\x12\x03+\x04\
    \x15\n\x0c\n\x05\x05\0\x02$\x01\x12\x03+\x04\x0f\n\x0c\n\x05\x05\0\x02$\
    \x02\x12\x03+\x12\x14\n\x0b\n\x04\x05\0\x02%\x12\x03,\x04\x17\n\x0c\n\
    \x05\x05\0\x02%\x01\x12\x03,\x04\x11\n\x0c\n\x05\x05\0\x02%\x02\x12\x03,\
    \x14\x16\n\x0b\n\x04\x05\0\x02&\x12\x03-\x04\x15\n\x0c\n\x05\x05\0\x02&\
    \x01\x12\x03-\x04\x0f\n\x0c\n\x05\x05\0\x02&\x02\x12\x03-\x12\x14\n\x0b\
    \n\x04\x05\0\x02'\x12\x03.\x04\x0f\n\x0c\n\x05\x05\0\x02'\x01\x12\x03.\
    \x04\t\n\x0c\n\x05\x05\0\x02'\x02\x12\x03.\x0c\x0e\n\x0b\n\x04\x05\0\x02\
    (\x12\x03/\x04\x11\n\x0c\n\x05\x05\0\x02(\x01\x12\x03/\x04\x0b\n\x0c\n\
    \x05\x05\0\x02(\x02\x12\x03/\x0e\x10\n\n\n\x02\x04\0\x12\x042\05\x01\n\n\
    \n\x03\x04\0\x01\x12\x032\x08\x19\n\x0b\n\x04\x04\0\x02\0\x12\x033\x08\
    \x1b\n\x0c\n\x05\x04\0\x02\0\x06\x12\x033\x08\x11\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x033\x12\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x033\x19\x1a\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x034\x08*\n\x0c\n\x05\x04\0\x02\x01\x04\x12\
    \x034\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x034\x11\x17\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x034\x18%\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x034(\
    )\n\n\n\x02\x04\x01\x12\x047\0C\x01\n\n\n\x03\x04\x01\x01\x12\x037\x08\
    \x15\n\x0c\n\x04\x04\x01\x08\0\x12\x048\x08B\t\n\x0c\n\x05\x04\x01\x08\0\
    \x01\x12\x038\x0e\x1f\n\x0b\n\x04\x04\x01\x02\0\x12\x039\x10.\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x039\x10\x16\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x039\x17)\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x039,-\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03:\x10%\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03:\x10\
    \x16\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03:\x17\x20\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03:#$\n\x0b\n\x04\x04\x01\x02\x02\x12\x03;\x10)\n\
    \x0c\n\x05\x04\x01\x02\x02\x05\x12\x03;\x10\x16\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x03;\x17$\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03;'(\n\x0b\
    \n\x04\x04\x01\x02\x03\x12\x03<\x10$\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\
    \x03<\x10\x16\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03<\x17\x1f\n\x0c\n\
    \x05\x04\x01\x02\x03\x03\x12\x03<\"#\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\
    =\x10,\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03=\x10\x1d\n\x0c\n\x05\x04\
    \x01\x02\x04\x01\x12\x03=\x1e'\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03=*\
    +\n\x0b\n\x04\x04\x01\x02\x05\x12\x03>\x10.\n\x0c\n\x05\x04\x01\x02\x05\
    \x06\x12\x03>\x10\x1e\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03>\x1f)\n\
    \x0c\n\x05\x04\x01\x02\x05\x03\x12\x03>,-\n\x0b\n\x04\x04\x01\x02\x06\
    \x12\x03?\x10-\n\x0c\n\x05\x04\x01\x02\x06\x06\x12\x03?\x10\x1b\n\x0c\n\
    \x05\x04\x01\x02\x06\x01\x12\x03?\x1c(\n\x0c\n\x05\x04\x01\x02\x06\x03\
    \x12\x03?+,\n\x0b\n\x04\x04\x01\x02\x07\x12\x03@\x10.\n\x0c\n\x05\x04\
    \x01\x02\x07\x05\x12\x03@\x10\x15\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\
    \x03@\x16)\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03@,-\n\x0b\n\x04\x04\
    \x01\x02\x08\x12\x03A\x10)\n\x0c\n\x05\x04\x01\x02\x08\x05\x12\x03A\x10\
    \x14\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03A\x15$\n\x0c\n\x05\x04\x01\
    \x02\x08\x03\x12\x03A'(\n\n\n\x02\x04\x02\x12\x04E\0H\x01\n\n\n\x03\x04\
    \x02\x01\x12\x03E\x08\x15\n\x0b\n\x04\x04\x02\x02\0\x12\x03F\x08(\n\x0c\
    \n\x05\x04\x02\x02\0\x04\x12\x03F\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\
    \x12\x03F\x11\x16\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03F\x17#\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03F&'\n\x0b\n\x04\x04\x02\x02\x01\x12\x03G\
    \x08#\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03G\x08\x19\n\x0c\n\x05\x04\
    \x02\x02\x01\x01\x12\x03G\x1a\x1e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\
    \x03G!\"\n\n\n\x02\x04\x03\x12\x04J\0L\x01\n\n\n\x03\x04\x03\x01\x12\x03\
    J\x08\x16\n\x0b\n\x04\x04\x03\x02\0\x12\x03K\x08#\n\x0c\n\x05\x04\x03\
    \x02\0\x06\x12\x03K\x08\x19\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03K\x1a\
    \x1e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03K!\"\n\n\n\x02\x04\x04\x12\x04\
    N\0Q\x01\n\n\n\x03\x04\x04\x01\x12\x03N\x08\x1f\n\x0b\n\x04\x04\x04\x02\
    \0\x12\x03O\x08\x1a\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03O\x08\x0e\n\x0c\
    \n\x05\x04\x04\x02\0\x01\x12\x03O\x0f\x15\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03O\x18\x19\n\x0b\n\x04\x04\x04\x02\x01\x12\x03P\x08\x1b\n\x0c\n\
    \x05\x04\x04\x02\x01\x05\x12\x03P\x08\x0e\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03P\x0f\x16\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03P\x19\x1a\n\
    \n\n\x02\x04\x05\x12\x04S\0[\x01\n\n\n\x03\x04\x05\x01\x12\x03S\x08\x13\
    \n\x0c\n\x04\x04\x05\x08\0\x12\x04T\x08Z\t\n\x0c\n\x05\x04\x05\x08\0\x01\
    \x12\x03T\x0e\x1d\n\x0b\n\x04\x04\x05\x02\0\x12\x03U\x10.\n\x0c\n\x05\
    \x04\x05\x02\0\x05\x12\x03U\x10\x14\n\x0c\n\x05\x04\x05\x02\0\x01\x12\
    \x03U\x15)\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03U,-\n\x0b\n\x04\x04\x05\
    \x02\x01\x12\x03V\x10+\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03V\x10\x16\
    \n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03V\x17&\n\x0c\n\x05\x04\x05\x02\
    \x01\x03\x12\x03V)*\n\x0b\n\x04\x04\x05\x02\x02\x12\x03W\x102\n\x0c\n\
    \x05\x04\x05\x02\x02\x06\x12\x03W\x10\x1e\n\x0c\n\x05\x04\x05\x02\x02\
    \x01\x12\x03W\x1f-\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03W01\n\x0b\n\
    \x04\x04\x05\x02\x03\x12\x03X\x105\n\x0c\n\x05\x04\x05\x02\x03\x06\x12\
    \x03X\x10\x1e\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03X\x1f0\n\x0c\n\x05\
    \x04\x05\x02\x03\x03\x12\x03X34\n\x0b\n\x04\x04\x05\x02\x04\x12\x03Y\x10\
    B\n\x0c\n\x05\x04\x05\x02\x04\x06\x12\x03Y\x10'\n\x0c\n\x05\x04\x05\x02\
    \x04\x01\x12\x03Y(=\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x03Y@Ab\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::net::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(ErrorKindInternal::generated_message_descriptor_data());
            messages.push(ResponseError::generated_message_descriptor_data());
            messages.push(RemoteIOError::generated_message_descriptor_data());
            messages.push(DnsLookupError::generated_message_descriptor_data());
            messages.push(BadHttpFilterRegexError::generated_message_descriptor_data());
            messages.push(RemoteError::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ErrorKind::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
