// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `std_types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.std_types.IpAddr)
pub struct IpAddr {
    // message fields
    // @@protoc_insertion_point(field:protocol.std_types.IpAddr.inner)
    pub inner: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.std_types.IpAddr.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IpAddr {
    fn default() -> &'a IpAddr {
        <IpAddr as ::protobuf::Message>::default_instance()
    }
}

impl IpAddr {
    pub fn new() -> IpAddr {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inner",
            |m: &IpAddr| { &m.inner },
            |m: &mut IpAddr| { &mut m.inner },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IpAddr>(
            "IpAddr",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IpAddr {
    const NAME: &'static str = "IpAddr";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.inner = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.inner.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.inner);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.inner.is_empty() {
            os.write_bytes(1, &self.inner)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IpAddr {
        IpAddr::new()
    }

    fn clear(&mut self) {
        self.inner.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IpAddr {
        static instance: IpAddr = IpAddr {
            inner: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IpAddr {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IpAddr").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IpAddr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IpAddr {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.std_types.SocketAddr)
pub struct SocketAddr {
    // message fields
    // @@protoc_insertion_point(field:protocol.std_types.SocketAddr.ip)
    pub ip: ::protobuf::MessageField<IpAddr>,
    // @@protoc_insertion_point(field:protocol.std_types.SocketAddr.port)
    pub port: i32,
    // @@protoc_insertion_point(field:protocol.std_types.SocketAddr.flowinfo)
    pub flowinfo: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:protocol.std_types.SocketAddr.scope_id)
    pub scope_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.std_types.SocketAddr.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SocketAddr {
    fn default() -> &'a SocketAddr {
        <SocketAddr as ::protobuf::Message>::default_instance()
    }
}

impl SocketAddr {
    pub fn new() -> SocketAddr {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, IpAddr>(
            "ip",
            |m: &SocketAddr| { &m.ip },
            |m: &mut SocketAddr| { &mut m.ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port",
            |m: &SocketAddr| { &m.port },
            |m: &mut SocketAddr| { &mut m.port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flowinfo",
            |m: &SocketAddr| { &m.flowinfo },
            |m: &mut SocketAddr| { &mut m.flowinfo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "scope_id",
            |m: &SocketAddr| { &m.scope_id },
            |m: &mut SocketAddr| { &mut m.scope_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SocketAddr>(
            "SocketAddr",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SocketAddr {
    const NAME: &'static str = "SocketAddr";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ip)?;
                },
                16 => {
                    self.port = is.read_int32()?;
                },
                24 => {
                    self.flowinfo = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.scope_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.port);
        }
        if let Some(v) = self.flowinfo {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.scope_id {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ip.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.port != 0 {
            os.write_int32(2, self.port)?;
        }
        if let Some(v) = self.flowinfo {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.scope_id {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SocketAddr {
        SocketAddr::new()
    }

    fn clear(&mut self) {
        self.ip.clear();
        self.port = 0;
        self.flowinfo = ::std::option::Option::None;
        self.scope_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SocketAddr {
        static instance: SocketAddr = SocketAddr {
            ip: ::protobuf::MessageField::none(),
            port: 0,
            flowinfo: ::std::option::Option::None,
            scope_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SocketAddr {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SocketAddr").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SocketAddr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SocketAddr {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fstd_types.proto\x12\x12protocol.std_types\"\x1e\n\x06IpAddr\x12\
    \x14\n\x05inner\x18\x01\x20\x01(\x0cR\x05inner\"\xa7\x01\n\nSocketAddr\
    \x12*\n\x02ip\x18\x01\x20\x01(\x0b2\x1a.protocol.std_types.IpAddrR\x02ip\
    \x12\x12\n\x04port\x18\x02\x20\x01(\x05R\x04port\x12\x1f\n\x08flowinfo\
    \x18\x03\x20\x01(\rH\0R\x08flowinfo\x88\x01\x01\x12\x1e\n\x08scope_id\
    \x18\x04\x20\x01(\rH\x01R\x07scopeId\x88\x01\x01B\x0b\n\t_flowinfoB\x0b\
    \n\t_scope_idJ\xfb\x02\n\x06\x12\x04\0\0\r\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1b\n\n\n\x02\x04\0\x12\x04\x04\0\
    \x06\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x0e\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x05\x08\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x08\r\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x05\x0e\x13\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x05\x16\x17\n\n\n\x02\x04\x01\x12\x04\x08\0\r\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03\x08\x08\x12\n\x0b\n\x04\x04\x01\x02\0\x12\x03\t\x08\x16\
    \n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\t\x08\x0e\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\t\x0f\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\t\x14\x15\
    \n\x0b\n\x04\x04\x01\x02\x01\x12\x03\n\x08\x17\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\n\x08\r\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\n\x0e\
    \x12\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\n\x15\x16\n\x0b\n\x04\x04\
    \x01\x02\x02\x12\x03\x0b\x08%\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\
    \x0b\x08\x10\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0b\x11\x17\n\x0c\n\
    \x05\x04\x01\x02\x02\x01\x12\x03\x0b\x18\x20\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03\x0b#$\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x0c\x08%\n\x0c\n\
    \x05\x04\x01\x02\x03\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\x01\x02\x03\
    \x05\x12\x03\x0c\x11\x17\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x0c\x18\
    \x20\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x0c#$b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(IpAddr::generated_message_descriptor_data());
            messages.push(SocketAddr::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
