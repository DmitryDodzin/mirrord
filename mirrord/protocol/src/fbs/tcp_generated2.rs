// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::{cmp::Ordering, mem};

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod mirrord_protocol {

    use core::{cmp::Ordering, mem};

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_DAEMON_TCP_MESSAGE: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_DAEMON_TCP_MESSAGE: u8 = 2;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_DAEMON_TCP_MESSAGE: [DaemonTcpMessage; 3] = [
        DaemonTcpMessage::NONE,
        DaemonTcpMessage::NewTcpConnection,
        DaemonTcpMessage::TcpData,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct DaemonTcpMessage(pub u8);
    #[allow(non_upper_case_globals)]
    impl DaemonTcpMessage {
        pub const NONE: Self = Self(0);
        pub const NewTcpConnection: Self = Self(1);
        pub const TcpData: Self = Self(2);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 2;
        pub const ENUM_VALUES: &'static [Self] =
            &[Self::NONE, Self::NewTcpConnection, Self::TcpData];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::NONE => Some("NONE"),
                Self::NewTcpConnection => Some("NewTcpConnection"),
                Self::TcpData => Some("TcpData"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for DaemonTcpMessage {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for DaemonTcpMessage {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for DaemonTcpMessage {
        type Output = DaemonTcpMessage;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<u8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for DaemonTcpMessage {
        type Scalar = u8;
        #[inline]
        fn to_little_endian(self) -> u8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: u8) -> Self {
            let b = u8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for DaemonTcpMessage {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for DaemonTcpMessage {}
    pub struct DaemonTcpMessageUnionTableOffset {}

    // struct IpAddr, aligned to 1
    #[repr(transparent)]
    #[derive(Clone, Copy, PartialEq)]
    pub struct IpAddr(pub [u8; 4]);
    impl Default for IpAddr {
        fn default() -> Self {
            Self([0; 4])
        }
    }
    impl core::fmt::Debug for IpAddr {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            f.debug_struct("IpAddr")
                .field("value", &self.value())
                .finish()
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for IpAddr {}
    impl<'a> flatbuffers::Follow<'a> for IpAddr {
        type Inner = &'a IpAddr;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a IpAddr>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a IpAddr {
        type Inner = &'a IpAddr;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<IpAddr>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for IpAddr {
        type Output = IpAddr;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            let src =
                ::core::slice::from_raw_parts(self as *const IpAddr as *const u8, Self::size());
            dst.copy_from_slice(src);
        }
    }

    impl<'a> flatbuffers::Verifiable for IpAddr {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.in_buffer::<Self>(pos)
        }
    }

    impl<'a> IpAddr {
        #[allow(clippy::too_many_arguments)]
        pub fn new(value: &[u8; 4]) -> Self {
            let mut s = Self([0; 4]);
            s.set_value(value);
            s
        }

        pub fn value(&'a self) -> flatbuffers::Array<'a, u8, 4> {
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid array in this slot
            unsafe { flatbuffers::Array::follow(&self.0, 0) }
        }

        pub fn set_value(&mut self, items: &[u8; 4]) {
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid array in this slot
            unsafe { flatbuffers::emplace_scalar_array(&mut self.0, 0, items) };
        }
    }

    pub enum NewTcpConnectionOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct NewTcpConnection<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for NewTcpConnection<'a> {
        type Inner = NewTcpConnection<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> NewTcpConnection<'a> {
        pub const VT_CONNECTION_ID: flatbuffers::VOffsetT = 4;
        pub const VT_REMOTE_ADDRESS: flatbuffers::VOffsetT = 6;
        pub const VT_SOURCE_PORT: flatbuffers::VOffsetT = 8;
        pub const VT_LOCAL_ADDRESS: flatbuffers::VOffsetT = 10;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            NewTcpConnection { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args NewTcpConnectionArgs<'args>,
        ) -> flatbuffers::WIPOffset<NewTcpConnection<'bldr>> {
            let mut builder = NewTcpConnectionBuilder::new(_fbb);
            builder.add_connection_id(args.connection_id);
            if let Some(x) = args.local_address {
                builder.add_local_address(x);
            }
            if let Some(x) = args.remote_address {
                builder.add_remote_address(x);
            }
            builder.add_source_port(args.source_port);
            builder.finish()
        }

        #[inline]
        pub fn connection_id(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(NewTcpConnection::VT_CONNECTION_ID, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn remote_address(&self) -> Option<&'a IpAddr> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<IpAddr>(NewTcpConnection::VT_REMOTE_ADDRESS, None)
            }
        }
        #[inline]
        pub fn source_port(&self) -> u16 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u16>(NewTcpConnection::VT_SOURCE_PORT, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn local_address(&self) -> Option<&'a IpAddr> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<IpAddr>(NewTcpConnection::VT_LOCAL_ADDRESS, None)
            }
        }
    }

    impl flatbuffers::Verifiable for NewTcpConnection<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("connection_id", Self::VT_CONNECTION_ID, false)?
                .visit_field::<IpAddr>("remote_address", Self::VT_REMOTE_ADDRESS, false)?
                .visit_field::<u16>("source_port", Self::VT_SOURCE_PORT, false)?
                .visit_field::<IpAddr>("local_address", Self::VT_LOCAL_ADDRESS, false)?
                .finish();
            Ok(())
        }
    }
    pub struct NewTcpConnectionArgs<'a> {
        pub connection_id: u64,
        pub remote_address: Option<&'a IpAddr>,
        pub source_port: u16,
        pub local_address: Option<&'a IpAddr>,
    }
    impl<'a> Default for NewTcpConnectionArgs<'a> {
        #[inline]
        fn default() -> Self {
            NewTcpConnectionArgs {
                connection_id: 0,
                remote_address: None,
                source_port: 0,
                local_address: None,
            }
        }
    }

    pub struct NewTcpConnectionBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> NewTcpConnectionBuilder<'a, 'b> {
        #[inline]
        pub fn add_connection_id(&mut self, connection_id: u64) {
            self.fbb_
                .push_slot::<u64>(NewTcpConnection::VT_CONNECTION_ID, connection_id, 0);
        }
        #[inline]
        pub fn add_remote_address(&mut self, remote_address: &IpAddr) {
            self.fbb_
                .push_slot_always::<&IpAddr>(NewTcpConnection::VT_REMOTE_ADDRESS, remote_address);
        }
        #[inline]
        pub fn add_source_port(&mut self, source_port: u16) {
            self.fbb_
                .push_slot::<u16>(NewTcpConnection::VT_SOURCE_PORT, source_port, 0);
        }
        #[inline]
        pub fn add_local_address(&mut self, local_address: &IpAddr) {
            self.fbb_
                .push_slot_always::<&IpAddr>(NewTcpConnection::VT_LOCAL_ADDRESS, local_address);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> NewTcpConnectionBuilder<'a, 'b> {
            let start = _fbb.start_table();
            NewTcpConnectionBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<NewTcpConnection<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for NewTcpConnection<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("NewTcpConnection");
            ds.field("connection_id", &self.connection_id());
            ds.field("remote_address", &self.remote_address());
            ds.field("source_port", &self.source_port());
            ds.field("local_address", &self.local_address());
            ds.finish()
        }
    }
    pub enum TcpDataOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct TcpData<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for TcpData<'a> {
        type Inner = TcpData<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> TcpData<'a> {
        pub const VT_CONNECTION_ID: flatbuffers::VOffsetT = 4;
        pub const VT_BYTES: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            TcpData { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args TcpDataArgs<'args>,
        ) -> flatbuffers::WIPOffset<TcpData<'bldr>> {
            let mut builder = TcpDataBuilder::new(_fbb);
            builder.add_connection_id(args.connection_id);
            if let Some(x) = args.bytes {
                builder.add_bytes(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn connection_id(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(TcpData::VT_CONNECTION_ID, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn bytes(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        TcpData::VT_BYTES,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for TcpData<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("connection_id", Self::VT_CONNECTION_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "bytes",
                    Self::VT_BYTES,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct TcpDataArgs<'a> {
        pub connection_id: u64,
        pub bytes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for TcpDataArgs<'a> {
        #[inline]
        fn default() -> Self {
            TcpDataArgs {
                connection_id: 0,
                bytes: None,
            }
        }
    }

    pub struct TcpDataBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> TcpDataBuilder<'a, 'b> {
        #[inline]
        pub fn add_connection_id(&mut self, connection_id: u64) {
            self.fbb_
                .push_slot::<u64>(TcpData::VT_CONNECTION_ID, connection_id, 0);
        }
        #[inline]
        pub fn add_bytes(&mut self, bytes: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(TcpData::VT_BYTES, bytes);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TcpDataBuilder<'a, 'b> {
            let start = _fbb.start_table();
            TcpDataBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<TcpData<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for TcpData<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("TcpData");
            ds.field("connection_id", &self.connection_id());
            ds.field("bytes", &self.bytes());
            ds.finish()
        }
    }
    pub enum DaemonTcpOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct DaemonTcp<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for DaemonTcp<'a> {
        type Inner = DaemonTcp<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> DaemonTcp<'a> {
        pub const VT_INNER_TYPE: flatbuffers::VOffsetT = 4;
        pub const VT_INNER: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            DaemonTcp { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args DaemonTcpArgs,
        ) -> flatbuffers::WIPOffset<DaemonTcp<'bldr>> {
            let mut builder = DaemonTcpBuilder::new(_fbb);
            if let Some(x) = args.inner {
                builder.add_inner(x);
            }
            builder.add_inner_type(args.inner_type);
            builder.finish()
        }

        #[inline]
        pub fn inner_type(&self) -> DaemonTcpMessage {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<DaemonTcpMessage>(DaemonTcp::VT_INNER_TYPE, Some(DaemonTcpMessage::NONE))
                    .unwrap()
            }
        }
        #[inline]
        pub fn inner(&self) -> Option<flatbuffers::Table<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                        DaemonTcp::VT_INNER,
                        None,
                    )
            }
        }
        #[inline]
        #[allow(non_snake_case)]
        pub fn inner_as_new_tcp_connection(&self) -> Option<NewTcpConnection<'a>> {
            if self.inner_type() == DaemonTcpMessage::NewTcpConnection {
                self.inner().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { NewTcpConnection::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn inner_as_tcp_data(&self) -> Option<TcpData<'a>> {
            if self.inner_type() == DaemonTcpMessage::TcpData {
                self.inner().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { TcpData::init_from_table(t) }
                })
            } else {
                None
            }
        }
    }

    impl flatbuffers::Verifiable for DaemonTcp<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_union::<DaemonTcpMessage, _>(
                    "inner_type",
                    Self::VT_INNER_TYPE,
                    "inner",
                    Self::VT_INNER,
                    false,
                    |key, v, pos| match key {
                        DaemonTcpMessage::NewTcpConnection => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<NewTcpConnection>>(
                                "DaemonTcpMessage::NewTcpConnection",
                                pos,
                            ),
                        DaemonTcpMessage::TcpData => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<TcpData>>(
                                "DaemonTcpMessage::TcpData",
                                pos,
                            ),
                        _ => Ok(()),
                    },
                )?
                .finish();
            Ok(())
        }
    }
    pub struct DaemonTcpArgs {
        pub inner_type: DaemonTcpMessage,
        pub inner: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    }
    impl<'a> Default for DaemonTcpArgs {
        #[inline]
        fn default() -> Self {
            DaemonTcpArgs {
                inner_type: DaemonTcpMessage::NONE,
                inner: None,
            }
        }
    }

    pub struct DaemonTcpBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> DaemonTcpBuilder<'a, 'b> {
        #[inline]
        pub fn add_inner_type(&mut self, inner_type: DaemonTcpMessage) {
            self.fbb_.push_slot::<DaemonTcpMessage>(
                DaemonTcp::VT_INNER_TYPE,
                inner_type,
                DaemonTcpMessage::NONE,
            );
        }
        #[inline]
        pub fn add_inner(&mut self, inner: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DaemonTcp::VT_INNER, inner);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DaemonTcpBuilder<'a, 'b> {
            let start = _fbb.start_table();
            DaemonTcpBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<DaemonTcp<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for DaemonTcp<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("DaemonTcp");
            ds.field("inner_type", &self.inner_type());
            match self.inner_type() {
                DaemonTcpMessage::NewTcpConnection => {
                    if let Some(x) = self.inner_as_new_tcp_connection() {
                        ds.field("inner", &x)
                    } else {
                        ds.field(
                            "inner",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                DaemonTcpMessage::TcpData => {
                    if let Some(x) = self.inner_as_tcp_data() {
                        ds.field("inner", &x)
                    } else {
                        ds.field(
                            "inner",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                _ => {
                    let x: Option<()> = None;
                    ds.field("inner", &x)
                }
            };
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `DaemonTcp`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_daemon_tcp_unchecked`.
    pub fn root_as_daemon_tcp(buf: &[u8]) -> Result<DaemonTcp, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<DaemonTcp>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `DaemonTcp` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_daemon_tcp_unchecked`.
    pub fn size_prefixed_root_as_daemon_tcp(
        buf: &[u8],
    ) -> Result<DaemonTcp, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<DaemonTcp>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `DaemonTcp` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_daemon_tcp_unchecked`.
    pub fn root_as_daemon_tcp_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<DaemonTcp<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<DaemonTcp<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `DaemonTcp` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_daemon_tcp_unchecked`.
    pub fn size_prefixed_root_as_daemon_tcp_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<DaemonTcp<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<DaemonTcp<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a DaemonTcp and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `DaemonTcp`.
    pub unsafe fn root_as_daemon_tcp_unchecked(buf: &[u8]) -> DaemonTcp {
        flatbuffers::root_unchecked::<DaemonTcp>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed DaemonTcp and
    /// returns it. # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `DaemonTcp`.
    pub unsafe fn size_prefixed_root_as_daemon_tcp_unchecked(buf: &[u8]) -> DaemonTcp {
        flatbuffers::size_prefixed_root_unchecked::<DaemonTcp>(buf)
    }
    #[inline]
    pub fn finish_daemon_tcp_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<DaemonTcp<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_daemon_tcp_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<DaemonTcp<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod mirrord_protocol
